{"version":3,"sources":["Views/CSS/NewsView.module.css","Views/CSS/HomeView.module.css","Components/LoadingIcon.module.css","Views/CSS/App.module.css","Components/LoadingIcon.js","Components/News/NewsArticleItem.js","Components/ViewHeader.js","Views/NewsView.js","Components/Home/ArticleItem.js","Components/Home/ArticleList.js","Views/HomeView.js","Views/App.js","serviceWorker.js","index.js","Components/ViewHeader.module.css","Components/News/NewsArticleItem.module.css","Components/Home/ArticleItem.module.css"],"names":["module","exports","LoadingIcon","props","className","styles","NewsArticleItem","data","OuterWrapper","onClick","window","open","permalink","link","images","style","backgroundImage","share","desktop","Image","Details","category","H1","toUpperCase","title","H2","overview","P","Fade","ViewHeader","Header","fontSize","margin","Center","join","text","to","ReadMoreButton","forward","back","linkText","NewsView","useState","payload","setData","articles","setArticles","useEffect","fetch","then","response","json","sortedData","sort","a","b","id","removedDoubles","forEach","cur","find","doubleArticle","push","Main","length","map","index","key","ArticleItem","src","thumb","mobile","alt","ArticleList","outline","undefined","HomeView","fetchOptions","mode","topArticles","setTopArticles","maxLength","top","slice","App","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","basename","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bad7ec2d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"OuterWrapper\":\"NewsView_OuterWrapper__1h_7g\",\"Header\":\"NewsView_Header__3tS1D\",\"Main\":\"NewsView_Main__3FJsk\",\"H1\":\"NewsView_H1__6F7aM\",\"H2\":\"NewsView_H2__3Kl_b\",\"ReadMoreButton\":\"NewsView_ReadMoreButton__1kMuL\",\"Center\":\"NewsView_Center__3N6wK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"OuterWrapper\":\"HomeView_OuterWrapper__1vzwS\",\"Main\":\"HomeView_Main__2v_0E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LoadingIcon\":\"LoadingIcon_LoadingIcon__1Dzjq\",\"Jiggle\":\"LoadingIcon_Jiggle__1DkyG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"OuterWrapper\":\"App_OuterWrapper__x-XVZ\"};","// Frameworks && Libraries\r\nimport React from 'react';\r\nimport { IoIosBeer } from 'react-icons/io';\r\n// Styling\r\nimport styles from './LoadingIcon.module.css';\r\n\r\n/*  Loading Icon\r\n *  Pint of Beer Icon that shakes. Could be modified to accept Icon Props for use elsewhere.\r\n */\r\nconst LoadingIcon = props => {\r\n    return (\r\n        <div className={styles.LoadingIcon}>\r\n            <IoIosBeer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoadingIcon;","// Frameworks & Libraries\r\nimport React from 'react';\r\n// Custom Components\r\nimport LoadingIcon from '../LoadingIcon';\r\n// Styling\r\nimport styles from './NewsArticleItem.module.css';\r\n\r\n/*  Displays a single news article teaser in a different format than appears in the\r\n *  top 6 articles list.\r\n *  Would link/route to the article within the application in non-demo practice.\r\n *  onClick of the element links to the original article in a new tab\r\n *  Props -\r\n *      data: object - object containing the data from the api. Must be in expected format. \r\n */\r\nconst NewsArticleItem = props => {\r\n    return props.data ?\r\n        < div\r\n            className={styles.OuterWrapper}\r\n            onClick={() => window.open(props.data.permalink.link, \"_blank\")}\r\n        >\r\n            {\r\n                // contained the image within a div here to show a secondary way to\r\n                // display the image\r\n                props.data.images &&\r\n                <div\r\n                    style={{ backgroundImage: `url(${props.data.images.share.desktop.link})`}}\r\n                    className={styles.Image}\r\n                ></div>\r\n            }\r\n            <section className={styles.Details}>\r\n                {props.data.category && <h1 className={styles.H1}>{props.data.category.toUpperCase()}</h1>}\r\n                {props.data.title && <h2 className={styles.H2}>{props.data.title}</h2>}\r\n                {props.data.overview && <p className={styles.P}>{props.data.overview}</p>}\r\n                <section className={styles.Fade} />\r\n            </section>\r\n        </div >\r\n        : <LoadingIcon />\r\n}\r\n\r\nexport default NewsArticleItem; ","// Frameworks & Libraries\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { IoIosBeer, IoIosArrowBack, IoIosArrowForward } from 'react-icons/io';\r\n// Styling\r\nimport styles from './ViewHeader.module.css';\r\n\r\n/*  Header Items for the views\r\n *  props - \r\n *      forward: bool - if present, will display the forward arrow icon\r\n *      back: bool - if present, will display the back arrow icon\r\n *      text: string - Heading description\r\n *      linkText: string - Text to display in the link \r\n *      link: string - route/path to link to\r\n */\r\nconst ViewHeader = props => {\r\n    return (\r\n        <header className={styles.Header}>\r\n            <IoIosBeer\r\n                style={{ fontSize: \"1.5em\", margin: \"0px 5px\" }}\r\n                className={styles.Center}\r\n            />\r\n            <h1 className={[styles.H1, styles.Center].join(' ')}>\r\n                {props.text}\r\n        </h1>\r\n            <Link to={props.link} className={styles.ReadMoreButton}>\r\n                {props.forward && <IoIosArrowForward\r\n                    style={{ fontSize: \"1.5em\", margin: \"0px 5px\" }}\r\n                    className={styles.Center}\r\n                />}\r\n                {props.back && <IoIosArrowBack\r\n                    style={{ fontSize: \"1.5em\", margin: \"0px 5px\" }}\r\n                    className={styles.Center}\r\n                />}\r\n                <h2 className={[styles.H2, styles.Center].join(' ')} >\r\n                    {props.linkText}\r\n                </h2>\r\n            </Link>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default ViewHeader;","// Frameworks\r\nimport React, { useEffect, useState } from 'react';\r\n// Custom Components\r\nimport NewsArticleItem from '../Components/News/NewsArticleItem';\r\nimport ViewHeader from '../Components/ViewHeader';\r\n// Styling\r\n// import styles from './CSS/HomeView.module.css';\r\nimport styles from './CSS/NewsView.module.css';\r\n// TEMPORARY\r\n// import testData from '../testData.json';\r\n\r\n/*  News View\r\n *  Ideally this would be its own view, not necessarily a self-contained component for use on\r\n *  other views. As result, a lot of this code is repeated from the HomeView. This wouldn't typically be the case.\r\n */\r\nconst NewsView = props => {\r\n    const url = \"https://justbeerapp.com/api/v8/articles/\";\r\n\r\n    // State Management & Fetch on component mount\r\n    const [data, setData] = useState({ payload: [] });\r\n    const [articles, setArticles] = useState([]);\r\n\r\n    /* \r\n * I would like to handle this in a lazy-loading fashion in a non-demo build and likely utilize\r\n * other API-URI's as discussed in the interview. IE: /api/v8/articles/someCategorieOfArticle\r\n * Note: It's an assumption that the articles are all unique. I found duplicates in the data after the top 6 records. \r\n * Questions in development would be: Should I be filtering the results for unique records only? Or are the top 6\r\n * meant to be used in this way? In the NewsView, I filter the duplicate results.\r\n */\r\n    useEffect(() => {\r\n        fetch(url)\r\n            .then(response => response.json())\r\n            .then(response => response ? setData(response) : { payload: [] }); // Ensuring articles is never undefined or null\r\n    }, []);\r\n\r\n    // For localhost testing\r\n    // useEffect(() => {\r\n    //     const sortedData = testData.payload.sort((a, b) => a.id < b.id);\r\n    //     const removedDoubles = [];\r\n    //     sortedData.forEach(cur => {\r\n    //         if (!removedDoubles.find(doubleArticle => doubleArticle.id === cur.id)) {\r\n    //             removedDoubles.push(cur);\r\n    //         }\r\n    //     });\r\n    //     setData(removedDoubles)\r\n    // }, [])\r\n\r\n    useEffect(() => {\r\n        const sortedData = data.payload.sort((a, b) => a.id < b.id);\r\n        const removedDoubles = [];\r\n        sortedData.forEach(cur => {\r\n            if (!removedDoubles.find(doubleArticle => doubleArticle.id === cur.id)) {\r\n                removedDoubles.push(cur);\r\n            }\r\n        });\r\n        setArticles(removedDoubles)\r\n    }, [data])\r\n\r\n    /* \r\n     * I would like to handle this in a lazy-loading fashion in a non-demo build and likely utilize\r\n     * other API-URI's as discussed in the interview. IE: /api/v8/articles/someCategorieOfArticle\r\n     */\r\n    // useEffect(() => {\r\n    //     fetch(url)\r\n    //         .then(response => response.json())\r\n    //         .then(response => response ? setData(response) : { payload: [] }); // Ensuring articles is never undefined or null\r\n    // }, []);\r\n\r\n    return (\r\n        <div className={styles.OuterWrapper}>\r\n            <ViewHeader text=\"Latest Posts\" linkText=\"Home\" back link=\"/\" />\r\n            <main className={styles.Main}>\r\n                {\r\n                    articles.length > 0 ?\r\n                        articles.map((cur, index) => {\r\n                            return <NewsArticleItem key={index} data={cur} />\r\n                        })\r\n                        : <h2>Oops! Spilled my beer on the latest paper. Check back soon!</h2>\r\n                }\r\n            </main>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NewsView;","// Frameworks & Libraries\r\nimport React from 'react';\r\n// Custom Components\r\nimport LoadingIcon from '../LoadingIcon';\r\n// Styling\r\nimport styles from './ArticleItem.module.css';\r\n\r\n/*  Displays a single news article teaser\r\n *  onClick of the element links to the original article in a new tab\r\n *  Would link/route to the article within the application in non-demo practice.\r\n *  Props -\r\n *      data: object - object containing the data from the api. Must be in expected format. \r\n */ \r\nconst ArticleItem = props => {\r\n    return props.data ?\r\n        < div\r\n            className={styles.OuterWrapper}\r\n            onClick={() => window.open(props.data.permalink.link, \"_blank\")}\r\n        >\r\n            {\r\n                // Although not currently used as it appears that the desktop\r\n                // and mobile images are the exact same, we could use an imageset\r\n                // to select which image to use for better optimization if it is a concern\r\n                props.data.images &&\r\n                <img\r\n                    src={props.data.images.thumb.mobile.link}\r\n                    alt=\"\"\r\n                    className={styles.Image}\r\n                />\r\n            }\r\n            <section className={styles.Details}>\r\n                {props.data.category && <h1 className={styles.H1}>{props.data.category.toUpperCase()}</h1>}\r\n                {props.data.title && <h2 className={styles.H2}>{props.data.title}</h2>}\r\n                {props.data.overview && <p className={styles.P}>{props.data.overview}</p>}\r\n                <section className={styles.Fade} />\r\n            </section>\r\n        </div >\r\n        : <LoadingIcon />\r\n}\r\n\r\nexport default ArticleItem; ","// Frameworks\r\nimport React from 'react';\r\n\r\n// Custom Components\r\nimport ArticleItem from './ArticleItem';\r\n\r\n/*  articles : Array isRequired \r\n *  Displays a list of articles.\r\n *  This element isn't entirely necessary in this demo. It's purpose would be to contain the list\r\n *  along with its header so it would be self-contained and may be used anywhere within the application/website\r\n */\r\nconst ArticleList = props => {\r\n    return (\r\n        <>\r\n            {\r\n                props.articles && props.articles.length > 0 ? props.articles.map((cur, index) => {\r\n                    return (\r\n                        // I would like to assume the article id is unique, but that isn't verified at the moment. So, I'm using the index\r\n                        // as the key for the elements within the array.\r\n                        // Also - if I was handling CSS differently I could omit the div being used as a divider between articles and use a pseudo selector.\r\n                        <section key={index}>\r\n                            <ArticleItem\r\n                                data={cur}\r\n                            />\r\n                            {index < props.articles.length - 1 ? <div style={{ outline: \"1px solid lightgrey\" }}></div> : undefined}</section>\r\n                    )\r\n                }) : <h2 style={{}}>No news is good news. Check back soon!</h2>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ArticleList;","// Frameworks & Libraries\r\nimport React, { useEffect, useState } from 'react';\r\n// Custom Components\r\nimport ArticleList from '../Components/Home/ArticleList';\r\nimport ViewHeader from '../Components/ViewHeader';\r\n// Styling\r\nimport styles from './CSS/HomeView.module.css';\r\n\r\n// TEMPORARY\r\n// import testData from '../testData.json';\r\n\r\n/* Based on the current JustBeer website, this view would take in a\r\n * parameter to determine which categorie of news should be fetched / displayed.\r\n * A more comprehensive list of news articles would be included on this page and\r\n * I would likely load them dynamically using lazy-loading, unless that caused performace\r\n * issues, in which case paging could be done.\r\n */\r\nconst HomeView = props => {\r\n    const url = \"https://justbeerapp.com/api/v8/articles/\";\r\n    const fetchOptions = {\r\n        // \"Access-Control-Allow-Origin\": \"*\"\r\n        mode: 'no-cors'\r\n    }\r\n    // State Management & Fetch on component mount\r\n    const [data, setData] = useState({ payload: [] });\r\n    const [topArticles, setTopArticles] = useState([]);\r\n\r\n    // For localhost testing\r\n    // useEffect(() => { setData(testData) }, [])\r\n\r\n    /* \r\n     * I would like to handle this in a lazy-loading fashion in a non-demo build and likely utilize\r\n     * other API-URI's as discussed in the interview. IE: /api/v8/articles/someCategorieOfArticle\r\n     * Note: It's an assumption that the articles are all unique. I found duplicates in the data after the top 6 records. \r\n     * Questions in development would be: Should I be filtering the results for unique records only? Or are the top 6\r\n     * meant to be used in this way? In the NewsView, I filter the duplicate results.\r\n     */\r\n    useEffect(() => {\r\n        fetch(url, fetchOptions)\r\n            .then(response => response.json())\r\n            .then(response => setData(response)); // Ensuring articles is never undefined or null\r\n            // .catch(err => console.error(err));\r\n        }, []);\r\n\r\n    // Shallow copy of the first 6 articles retrieved. If a deep copy was needed I would use lodash-deepClone\r\n    useEffect(() => {\r\n        const maxLength = data.payload.length >= 6 ? 6 : data.payload.length;\r\n        const top = data.payload.slice(0, maxLength);\r\n        setTopArticles(top);\r\n    }, [data]);\r\n\r\n    /* This can be refactored since the header is the same, only thing changing\r\n     * are the icon name and the link text. TODO: Create a reusable header component to replace the 'header' section.\r\n     */\r\n    return (\r\n        <div className={styles.OuterWrapper}>\r\n            <ViewHeader text=\"Latest Posts\" linkText=\"More\" forward link=\"/articles/all\" />\r\n            <main className={styles.Main}>\r\n                <ArticleList articles={topArticles} />\r\n            </main>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomeView;","// Frameworks\nimport React from 'react';\nimport { Route } from 'react-router-dom';\n// Custom Components\nimport NewsView from './NewsView';\nimport HomeView from './HomeView';\n// Styling\nimport styles from './CSS/App.module.css';\n\n/* Application Container - Routing between Home and News Views\n * The home view contains the first four articles returned from the api\n * clicking  on More routes to a page similar to https://justbeerapp.com/articles/latest\n */\nfunction App() {\n  return (\n    <div className={styles.OuterWrapper}>\n      <Route key=\"/\" exact path=\"/\" component={HomeView} />\n      <Route key=\"/articles/all\" exact path=\"/articles/all\" component={NewsView} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './Views/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <HashRouter basename=\"/\">\n        <App />\n    </HashRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"ViewHeader_Header__DUTyD\",\"H1\":\"ViewHeader_H1__29KPk\",\"H2\":\"ViewHeader_H2__DHDRZ\",\"Center\":\"ViewHeader_Center__3HFrp\",\"ReadMoreButton\":\"ViewHeader_ReadMoreButton__13yQk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"OuterWrapper\":\"NewsArticleItem_OuterWrapper__itBZV\",\"Image\":\"NewsArticleItem_Image__1gh9g\",\"Details\":\"NewsArticleItem_Details__1rZAR\",\"H1\":\"NewsArticleItem_H1__1dMH5\",\"H2\":\"NewsArticleItem_H2__1bUH5\",\"P\":\"NewsArticleItem_P__269Qf\",\"Fade\":\"NewsArticleItem_Fade__3_QAF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"OuterWrapper\":\"ArticleItem_OuterWrapper__U5YTY\",\"Image\":\"ArticleItem_Image__1rAPa\",\"Details\":\"ArticleItem_Details__2eGbL\",\"H1\":\"ArticleItem_H1__5aAbz\",\"H2\":\"ArticleItem_H2__147h-\",\"P\":\"ArticleItem_P__3OQ9b\",\"Fade\":\"ArticleItem_Fade__1DfmS\"};"],"sourceRoot":""}